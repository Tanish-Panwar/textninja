{"version":3,"sources":["components/About.js","components/NavBar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","className","style","backgroundColor","mode","color","border","NavBar","to","title","type","id","aboutText","onClick","changeThemeR","changeThemeG","changeThemeB","toggleMode","htmlFor","document","getElementById","TextForm","useState","text","setText","toRep","setToRep","toRepWith","setToRepWith","heading","placeholder","value","onChange","event","target","name","cols","rows","tabIndex","e","replaceAll","length","showAlert","newText","toUpperCase","split","join","tex","navigator","clipboard","writeText","ar","caps","i","temp","charAt","slice","toLowerCase","filter","element","defaultProps","Alert","alert","role","word","lower","msg","App","setMode","setalert","basename","body","exact","path","message","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.402af10c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function About(props) {\r\n    return (\r\n        <div className=\"container my-3\" >\r\n            <div className=\"container containerAbout\" style={{backgroundColor: props.mode === 'light' ? 'dark': 'light', color: props.mode === 'dark' ? 'light': 'dark', border: props.mode === 'dark' ? 'light':'dark'}}>\r\n                <p>\r\n                BE A TEXT NINJA USE TEXT NINJA.\r\n                    Text Ninja is a simple to use text analytics web based application, why \"web\", because you don't need to install it in you phone,\r\n                    And you don't have to give extra memory for this application.\r\n\r\n                    It is a lightweight web application, for analyzing your text, It has all necessary features,\r\n                    <br/>\r\n                    Like:\r\n                    <br/>\r\n                </p>\r\n                <p>1. Text Capitalization after full stops.</p>\r\n                    \r\n                    <p>2. Uppercasing each letter of your phrase.</p>\r\n                    \r\n                    <p>3. Lowercasing each letter of your phrase.</p>\r\n                    \r\n                    <p>4. Removing unwanted spaces from your phrase.</p>\r\n                    \r\n                    <p>5. Copying a huge text file without lagging.</p>\r\n                    \r\n                    <p>6. Letter counter for your phrase.</p>\r\n                    \r\n                    <p>7. Words counter for your phrase.</p>\r\n                    \r\n                    <p>8. A Timer, about how much time a normal reader may take to read your phrase.</p>\r\n                    \r\n                    <p>9. Text Preview for you text.</p>\r\n                    \r\n                    <p>10. With Dark mode, so you can even use it at night.</p>\r\n                    \r\n                    <p>11. 3 Major color themes for both dark mode and light mode.</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","// This is a react function based component.(rfc)\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom';\r\n\r\n// Now we have just added a props which we used to change the title of our navBar component.\r\nexport default function NavBar(props) {\r\n\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`} >\r\n        <div className=\"container-fluid\">\r\n            {/* Here we used our props with title. */}\r\n          <Link className=\"navbar-brand\" to=\"/\"><u>{props.title}</u></Link>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" aria-current=\"page\" to=\"/\">Home</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                  {/* We can also change the about with our props */}\r\n                <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n              </li>\r\n            </ul>\r\n            {/* <form className=\"d-flex\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n              <button className=\"btn btn-outline-info\" type=\"submit\">Search</button>\r\n            </form> */}\r\n            <div className=\"ColorPickerContainer\">\r\n                <label>Color Theme</label>\r\n                <button onClick={props.changeThemeR} className=\"colorPicker\" id=\"Red\">R</button>\r\n                <button onClick={props.changeThemeG} className=\"colorPicker\" id=\"Green\">G</button>\r\n                <button onClick={props.changeThemeB} className=\"colorPicker\" id=\"Blue\">B</button>\r\n            </div>\r\n            <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark': 'light'}`}>\r\n              <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.mode==='light'? \"Enable dark mode\": \"Disable dark mode\"}</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\n\r\nexport var navColor = document.getElementById('navColor');\r\n// This is a object proptype that takes string with the name of title and aboutText\r\n\r\n// This is also used for double checking that we need to use that datatype in that case.\r\n// NavBar.propTypes = {\r\n//     title: PropTypes.string,\r\n//     aboutText: PropTypes.string   \r\n// }\r\n\r\n\r\n// We can also set a default proptype for our any props .\r\n// It is a good practice to add a default props \r\nNavBar.defaultProps = {\r\n    title: \"TITLE\",\r\n    aboutText: \"About\"\r\n}\r\n\r\n\r\n// We can also set a isRequired to our props so that we will get an error when we don't add it .\r\n// IT is also a good practice to use isRequired \r\nNavBar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string   \r\n}\r\n","// Now we are going to move ahead to make our app now we are going to learn about state and events handling.\r\n\r\n// Now we will use {useState} : when a prop is defined or a componenet, Those components have a state of their own.\r\n// Like when we enter text in textarea that is a state when it is empty that is a state etc.\r\n\r\n// We need to import use state from react for using hook.\r\n// We will basically render those changed states using hook.\r\nimport React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n\r\n    // Lets create a button click function.\r\n    const handleUpClick = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        if (text.length > 0) {\r\n            props.showAlert(\"Converted to Uppercase\", \"success\");\r\n        } else {\r\n            props.showAlert(\"Enter some text first \", \"warning\");\r\n        }\r\n    }\r\n\r\n    const handleLowClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        if (text.length > 0) {\r\n            props.showAlert(\"Converted to Lowercase\", \"success\");\r\n        } else {\r\n            props.showAlert(\"Enter some text first \", \"warning\");\r\n        }\r\n    }\r\n\r\n    const handleClearClick = () => {\r\n        setText(\"\");\r\n        if (text.length > 0) {\r\n            props.showAlert(\"Cleared text\", \"success\");\r\n        } else {\r\n            props.showAlert(\"Enter some text first \", \"warning\");\r\n        }\r\n    }\r\n\r\n    // Remove extra spaces from text\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        if (text.length > 0) {\r\n            props.showAlert(\"Removed all extra spaces\", \"success\");\r\n        } else {\r\n            props.showAlert(\"Enter some text first \", \"warning\");\r\n        }\r\n    }\r\n\r\n    // Replace particular word.\r\n    const handleReplaceWord = () => {\r\n        // setText(text.replace(toRep, toRepWith));\r\n        setText(text.replaceAll(toRep, toRepWith));\r\n        if (text.length > 0) {\r\n            props.showAlert(\"Removed all extra spaces\", \"success\");\r\n        } else {\r\n            props.showAlert(\"Enter some text first \", \"warning\");\r\n        }\r\n    }\r\n\r\n    // Remove Extra Lines.\r\n    const handleExtraNewLines = () => {\r\n        let newText = text.split(/\\s+/);\r\n        setText(newText.join(\" \"));\r\n        if (text.length > 0) {\r\n            props.showAlert(\"Removed all extra spaces\", \"success\");\r\n        } else {\r\n            props.showAlert(\"Enter some text first \", \"warning\");\r\n        }\r\n    }\r\n\r\n    // For adding text in text area\r\n    const handleOnChange = (event) => {\r\n        // console.log('onChange');\r\n        setText(event.target.value);\r\n\r\n    }\r\n\r\n\r\n    // Capitalization of first letter after fullStop.\r\n    const handleCapitalize = () => {\r\n        var ar = [];\r\n        var caps = false;\r\n        ar = text.split(\".\");\r\n        for (var i = 0; i < ar.length; i++) {\r\n            var temp = ar[0];\r\n            ar[i] = ar[i].charAt(1).toUpperCase() + ar[i].slice(2);\r\n            ar[0] = temp.charAt(0).toUpperCase() + temp.slice(1);\r\n            caps = true;\r\n        }\r\n        if (caps === true) {\r\n            setText(ar.join(\". \"));\r\n        } else {\r\n            setText(text);\r\n        }\r\n\r\n        if (text.length > 0) {\r\n            props.showAlert(\"Capitalized the text from full stops.\", \"success\");\r\n        } else {\r\n            props.showAlert(\"Enter some text first \", \"warning\");\r\n        }\r\n    }\r\n\r\n    // Here we added a hook that reflect changes when the state changes,\r\n    // This is array destructuring, Text will get the first parameter of useState and setText will get the second parameter.\r\n    const [text, setText] = useState(\"\");\r\n    const [toRep, setToRep] = useState(\"\");\r\n    const [toRepWith, setToRepWith] = useState(\"\");\r\n    // When ever we want to change the state of text we need to use setText.\r\n\r\n    // text = \"new Text\" // THis is a wrong way to change the state,\r\n    // setText(\"new Text\";) // This is the correct way to change the state\r\n\r\n    const handleCopyClick = () => {\r\n        let tex = document.getElementById(\"myBox\");\r\n        navigator.clipboard.writeText(tex.value);\r\n        if (text.length > 0) {\r\n            props.showAlert(\"Copied to clipboard\", \"success\");\r\n        } else {\r\n            props.showAlert(\"Enter some text first \", \"warning\");\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container my-3\">\r\n                <h2>{props.heading}</h2>\r\n                <textarea placeholder=\"YOUR TEXT GOES HERE-\" value={text} onChange={handleOnChange} style={{ backgroundColor: props.mode === 'dark' ? '#16181b70' : '#ffffff75', color: props.mode === 'dark' ? 'white' : 'black' }} name=\"Your Text\" id=\"myBox\" className=\"form-control my-3 glass\" cols=\"50\" rows=\"5\" />\r\n\r\n                <div className=\"ModalSection\">\r\n                    <div className=\"modal fade\" id=\"exampleModal\" tabIndex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n                        <div className=\"modal-dialog\">\r\n                            <div className=\"modal-content\">\r\n                                <div className=\"modal-header\">\r\n                                    <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n                                </div>\r\n                                <div className=\"modal-body\">\r\n                                    <input value={toRep} onChange={(e) => setToRep(e.target.value)} type=\"email\" className=\"form-control\" placeholder='Enter words to replace' />\r\n                                    <input value={toRepWith} onChange={(e) => setToRepWith(e.target.value)} type=\"email\" className=\"form-control\" placeholder='Enter word to replace with' />\r\n                                </div>\r\n                                <div className=\"modal-footer\">\r\n                                    <button type=\"button\" className=\"btn btn-primary\" onClick={handleReplaceWord}>REPLACE</button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <button className={`btn btn-outline-${props.mode === 'light' ? 'dark' : 'light'} mx-2 my-2`} id=\"corrector\" onClick={handleUpClick}>UPPERCASE</button>\r\n                <button className={`btn btn-outline-${props.mode === 'light' ? 'dark' : 'light'} mx-2 my-2`} id=\"corrector\" onClick={handleExtraSpaces}>REMOVE SPACES</button>\r\n                <button className={`btn btn-outline-${props.mode === 'light' ? 'dark' : 'light'} mx-2 my-2`} id=\"corrector\" onClick={handleExtraNewLines}>REMOVE ENTERS</button>\r\n                <button className={`btn btn-outline-${props.mode === 'light' ? 'dark' : 'light'} mx-2 my-2`} id=\"corrector\" onClick={handleCopyClick}>COPY TEXT</button>\r\n                <button className={`btn btn-outline-${props.mode === 'light' ? 'dark' : 'light'} mx-2 my-2`} id=\"corrector\" onClick={handleCapitalize}>CAPITALIZE</button>\r\n                <button className={`btn btn-outline-${props.mode === 'light' ? 'dark' : 'light'} mx-2 my-2`} id=\"corrector\" onClick={handleLowClick}>LOWERCASE</button>\r\n                <button className={`btn btn-outline-${props.mode === 'light' ? 'dark' : 'light'} mx-2 my-2`} id=\"corrector\" onClick={handleClearClick}>CLEAR TEXT</button>\r\n                {/* <button className={`btn btn-outline-${props.mode === 'light' ? 'dark' : 'light'} mx-2 my-2`} id=\"corrector\" onClick={handleClearClick}>REPLACE TEXT</button> */}\r\n                <button type=\"button\" className={`btn btn-outline-${props.mode === 'light' ? 'dark' : 'light'} mx-2 my-2`} data-bs-toggle=\"modal\" data-bs-target=\"#exampleModal\">REPLACE TEXT</button>\r\n            </div>\r\n\r\n            <hr />\r\n            <div className=\"container my-3\">\r\n                <h2>Your Text Summary</h2>\r\n                <p><u>Your phrase has {text.split(/\\s+/).filter((element) => { return element.length !== 0 }).length} Words and {text.length} Characters</u></p>\r\n                {/* <p><u>Letters: {text.length}</u></p> */}\r\n                {/* <p><u>Words: {text===\"\"? 0 : text.split(\" \").length}</u></p> */}\r\n                <p><u>{\"A normal reader may read this phrase in \" + 0.008 * text.split(/\\s+/).filter((element) => { return element.length !== 0 }).length + \" minutes\"}</u></p>\r\n\r\n                <hr />\r\n\r\n                <h2>Text preview</h2>\r\n                <p id=\"box\">{text.length > 0 ? text : 'Enter your text to preview'}</p>\r\n\r\n            </div>\r\n\r\n\r\n            {/* Now we are going to make a new componenet About.js and we will unedrstand more about state. */}\r\n\r\n            {/* Now we will going to refactor app component and Improve our dark mode. */}\r\n\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const caps = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    \r\n\r\n    return (\r\n         props.alert && <div className={`alert a alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            {caps(props.alert.type)}: {props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","// import logo from './logo.svg';\nimport './App.css';\nimport About from './components/About';\nimport NavBar from './components/NavBar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Routes\n} from \"react-router-dom\";\n\n// We can also use outer javascript variables in jsx.\n// Example :\n// let name = \"Iron\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setalert] = useState(null);\n\n  const showAlert = (message, type)=> {\n    setalert({\n      msg: message,\n      type: type\n    })\n\n    setTimeout(()=> {\n      setalert(null);\n    }, 1500);\n  }\n\n  // if()\n\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#16181b';\n      document.body.style.color = '#f3f3f3';\n      // showAlert(\"Dark mode has been enabled\", \"success\");\n    }else {\n      setMode('light');\n      document.body.style.backgroundColor = '#f3f3f3';\n      document.body.style.color = '#16181b';\n      // showAlert(\"Light mode has been enabled\", \"success\");\n\n    }\n  }\n\n  const changeThemeR = () => {\n    if(mode === 'light'){\n      document.body.style.backgroundColor = '#ffaeae';\n      document.body.style.color = \"#000\";\n    }else {\n      document.body.style.backgroundColor = '#230000';\n      document.body.style.color = \"#fff\";\n    }\n  }\n\n  const changeThemeG = () => {\n    if(mode === 'light'){\n      document.body.style.backgroundColor = '#8affa7';\n      document.body.style.color = \"#000\";\n    }else {\n      document.body.style.backgroundColor = '#00290a';\n      document.body.style.color = \"#fff\";\n    }\n  }\n\n  const changeThemeB = () => {\n    if(mode === 'light'){\n      document.body.style.backgroundColor = '#94dbff';\n      document.body.style.color = \"#000\";\n    }else {\n      document.body.style.backgroundColor = '#001f2e';\n      document.body.style.color = \"#fff\";\n    }\n  }\n\n  return (\n    // This below written html is jsx it is 90% html but some keywords have been replaced.\n\n    // We can only return a single element in it if we try to add another elemnet before the div this will give us an error.\n    // <h1></h1>\n    // But we can use an empty tag so that we can use more the one elemnts but the return elemnt must be one.\n    // <>\n    // {/* See now we can add another tags */}\n    // {/* We can also remove the whole jsx we will going to do our whole work with jsx for making a beautiful webpage. */}\n\n    // </>\n\n\n// /* <> */\n\n// {/* We have removed our navbar code from here and maded a navbar component NavBar.  */}\n\n// {/* Now we are going to learn about Props.(PROPERTIES):  We make custom components */}\n// {/* Example: If we want to go onto a new page and don;t want to reload the page we can send a custom component for our recent page objects. */}\n\n\n//     {/* We are going to make components in our components folder */}\n//     {/* Now we can import our NavBar component from our components folder*/}\n//     {/* This helps us to make our code look more clean and good we can make custom components for navbar , footer,  sidebar, etc.  */}\n//     {/* We have just imported a navbar component */}\n\n//     {/* <NavBar/> */}\n\n//     {/* But what if we want to use the same custom components in many react apps , with diffrent titles we can use props. */}\n//     {/* Now we can add a title which we can change it in every app. */}\n\n//     {/* <NavBar title=\"TEXT CORRECTOR\"/> */}\n    \n//     {/* We can use those props anywhere in our component file. */}\n\n//     {/* We can now also change the about using aboutText  */}\n\n//     {/* <NavBar title=\"TEXT CORRECTOR\" aboutText=\"About Us\"/> */}\n//     {/* we have now setted our default proptypes for aboutText and title so now if we don't set the string for them we will get the default variables*/}\n\n//     {/* See we are getting an error in console for the title. */}\n//     {/* <NavBar title=\"TEXT NINJA\" mode={mode} toggleMode={toggleMode}    changeThemeR={changeThemeR}    changeThemeG={changeThemeG}    changeThemeB={changeThemeB}/>\n//     <Alert alert={alert}/> */}\n    \n\n//     {/* Now we are going to move our react app ahead and now we are going to learn and understand about State and handling events.  */}\n//     {/* And we are going to make a new component that is TEXT FORM */}\n//     {/* Lets add our text field */}\n//     {/* <div className=\"container my-3\">\n//       <TextForm showAlert={showAlert} heading=\"Enter your text for analyzing.\" mode={mode}   />\n//       <About/>\n//     </div> */}\n\n\n//     {/* Now we will make a new component which is alert. */}\n\n//     {/* Now we are going to use Router in react: Router is used to prevent a page from loading , */}\n//     {/* A Normal website loads everytime when we traverse to another page. */}\n//     {/* But If we use a router and then we load a page the whole page won't load only the particular contents of a page will load. */}\n\n<>\n<Router basename='/textninja'>\n    <NavBar title=\"TEXT NINJA\" mode={mode} toggleMode={toggleMode}    changeThemeR={changeThemeR}    changeThemeG={changeThemeG}    changeThemeB={changeThemeB}/>\n    <Alert alert={alert}/>\n    <div className=\"container my-3\">\n    <Routes>\n        <Route exact path=\"/about\" element={<About/>}/>\n        <Route exact path=\"/\" element={<TextForm showAlert={showAlert} heading=\"Enter your text for analyzing.\" mode={mode}   />} />\n    </Routes>\n    </div>\n</Router>\n</>\n\n// {/* <Route exact path='/' element={<PrivateRoute/>}>\n// <Route exact path='/' element={<Home/>}/>\n// </Route>\n// <Route exact path='/register' element={<Register/>}/>\n// <Route exact path='/login' element={<Login/>}/> */}\n\n\n\n// </>\n\n  );\n}\n\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}